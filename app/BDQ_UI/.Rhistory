TTPplot
})
# Generate MSM plots
incProgress(0.12, detail = "Generating MSM plots...")
if (input$population_radio == "Individual" | input$nsim == 1) {
MSMidvplot <- MSMidv_plots(input, sim_MSMtable)
output$plotMSM <- renderPlot({
MSMidvplot
})
} else {
MSMplot <- MSM_plots(input, sim_MSMtable)  # Call the function from the sourced file
output$plotMSM <- renderPlot({
MSMplot
})
}
# PK-additional simulation ####
# Render combined PK-additional plot
output$plotPKDavg <- renderPlot({
withProgress(message = "Generating PK Daily Average plot...", value = NULL, {
PKDavg_plots(input, sim_PKtable)  # Call the function from the sourced file
})
})
output$plotPKWavg <- renderPlot({
withProgress(message = "Generating PK Weekly Average plot...", value = NULL, {
PKWavg_plots(input, sim_PKtable)  # Call the function from the sourced file
})
})
# Show a centered success message
showNotification(
"All plots are generated successfully!",
type = "message",
duration = 3
)
# After all simulations complete, remove the overlay
removeUI(selector = "#loading-overlay", immediate = TRUE)
loading(FALSE)
# Set up download handlers after data generation
output$download_virtual_population <- downloadHandler(
filename = function() {
"Population_data_package.zip"
},
content = function(file) {
temp_dir <- tempdir()
temp_files <- c(
file.path(temp_dir, "virtual_individual_or_population.csv"),
file.path(temp_dir, "virtual_individual_or_population_specification.txt")
)
write.csv(virtual_population_df %>%
mutate(ALB   = round(ALB, 1),
CACOR = round(CACOR, 2),
K     = round(K, 1),
WT    = round(WT, 1)),
temp_files[1],
row.names = FALSE)
file.copy(
from = file.path(Server.directory, "virtual_individual_or_population_specification.txt"),
to = temp_files[2]
)
zip(file, files = temp_files, flags = "-j")
unlink(temp_files)
},
contentType = "application/zip"
)
output$download_simPK <- downloadHandler(
filename = function() {
"PK_data_package.zip"
},
content = function(file) {
withProgress(message = 'Creating PK data package', value = 0, {
incProgress(0.2, detail = "Creating temporary files...")
temp_dir <- tempdir()
temp_files <- c(
file.path(temp_dir, "PK_output.csv"),
file.path(temp_dir, "PK_specification.txt")
)
incProgress(0.3, detail = "Writing data files...")
write.csv(sim_PKtable %>%
mutate(
IPRED      = round(exp(IPRED)*1000, 2),
IPREDM2    = round(exp(IPREDM2)*1000, 2),
IPREDALB   = round(IPREDALB, 2),
IPREDWT    = round(IPREDWT,  2),
AAUCBDQ    = round(AAUCBDQ*1000, 2),
AAUCM2     = round(AAUCM2*1000, 2)
) %>%
rename(
"CONCBDQ"  = "IPRED",
"CONCM2"   = "IPREDM2",
"AUCBDQ"   = "AAUCBDQ",
"AUCM2"    = "AAUCM2"
) %>%
select(-AMT, -WT, -ALB, -SEX, -CACOR, -K),
temp_files[1],
row.names = FALSE)
incProgress(0.2, detail = "Copying specification file...")
file.copy(
from = file.path(Server.directory, "PK_specification.txt"),
to = temp_files[2]
)
incProgress(0.2, detail = "Creating zip file...")
zip(file, files = temp_files, flags = "-j")
incProgress(0.1, detail = "Cleaning up...")
unlink(temp_files)
})
},
contentType = "application/zip"
)
output$download_simQT <- downloadHandler(
filename = function() {
"QT_data_package.zip"
},
content = function(file) {
withProgress(message = 'Creating QT data package', value = 0, {
incProgress(0.2, detail = "Creating temporary files...")
temp_dir <- tempdir()
temp_files <- c(
file.path(temp_dir, "QT_output.csv"),
file.path(temp_dir, "QT_specification.txt")
)
incProgress(0.3, detail = "Writing data files...")
write.csv(sim_QTtable %>%
mutate(
CACOR = round(CACOR, 2),
K     = round(K, 1),
IPRED = round(IPRED, 2)
) %>%
rename("QTcF"  = "IPRED"),
temp_files[1],
row.names = FALSE)
incProgress(0.2, detail = "Copying specification file...")
file.copy(
from = file.path(Server.directory, "QT_specification.txt"),
to = temp_files[2]
)
incProgress(0.2, detail = "Creating zip file...")
zip(file, files = temp_files, flags = "-j")
incProgress(0.1, detail = "Cleaning up...")
unlink(temp_files)
})
},
contentType = "application/zip"
)
output$download_simTTP <- downloadHandler(
filename = function() {
"TTP_data_package.zip"
},
content = function(file) {
withProgress(message = 'Creating TTP data package', value = 0, {
incProgress(0.2, detail = "Creating temporary files...")
temp_dir <- tempdir()
temp_files <- c(
file.path(temp_dir, "TTP_output.csv"),
file.path(temp_dir, "TTP_specification.txt")
)
incProgress(0.3, detail = "Writing data files...")
write.csv(sim_TTPtable %>%
mutate(
HL      = round(HL, 2)
) %>%
select(-TIME, -MBL, -Y) %>%
rename("WEEK" = "WEEKP",
"TTPpos"  = "RTTE",
"CULneg"  = "NEG"
),
temp_files[1],
row.names = FALSE)
incProgress(0.2, detail = "Copying specification file...")
file.copy(
from = file.path(Server.directory, "TTP_specification.txt"),
to = temp_files[2]
)
incProgress(0.2, detail = "Creating zip file...")
zip(file, files = temp_files, flags = "-j")
incProgress(0.1, detail = "Cleaning up...")
unlink(temp_files)
})
},
contentType = "application/zip"
)
output$download_simMSM <- downloadHandler(
filename = function() {
"MSM_data_package.zip"
},
content = function(file) {
withProgress(message = 'Creating MSM data package', value = 0, {
incProgress(0.2, detail = "Creating temporary files...")
temp_dir <- tempdir()
temp_files <- c(
file.path(temp_dir, "longTermOutcome_output.csv"),
file.path(temp_dir, "longTermOutcome_specification.txt")
)
incProgress(0.3, detail = "Writing data files...")
write.csv(sim_MSMtable %>%
mutate(
HL2      = round(HL2, 2),
Log10MBLend = round(Log10MBLend, 2),
P_1      = round(P_1, 3),
P_2      = round(P_2, 3),
P_3      = round(P_3, 5),
P_5      = round(P_5, 5)
) %>%
rename("WEEK" = "time") %>%
select(-regimen, everything(), regimen) %>%
group_by(ID, WEEK) %>%
slice(1L),
temp_files[1],
row.names = FALSE)
incProgress(0.2, detail = "Copying specification file...")
file.copy(
from = file.path(Server.directory, "longTermOutcome_specification.txt"),
to = temp_files[2]
)
incProgress(0.2, detail = "Creating zip file...")
zip(file, files = temp_files, flags = "-j")
incProgress(0.1, detail = "Cleaning up...")
unlink(temp_files)
})
},
contentType = "application/zip"
)
})
})
###################### DOWNLOAD HANDLERS ######################
# Template download handler
output$download_template <- downloadHandler(
filename = function() {
"Virtual_population_template.csv"
},
content = function(file) {
template_path <- "//argos.storage.uu.se/MyFolder$/yujli183/PMxLab/Projects/BDQ shiny app optimization framework/ModelCodes/Virtual_population/TBPACTS/Virtual_population_template.csv"
if (!file.exists(template_path)) {
stop("Template file not found. Please contact the administrator.")
}
file.copy(from = template_path, to = file)
}
)
###################### FILE UPLOAD HANDLER ######################
observeEvent(input$uploaded_data, {
if (is.null(input$uploaded_data)) return(NULL)
tryCatch({
df <- read.csv(input$uploaded_data$datapath)
required_cols <- c("AGE", "WT", "ALB", "CACOR", "K", "MTTP", "SEX", "RACE")
missing_cols <- setdiff(required_cols, names(df))
if (length(missing_cols) > 0) {
showNotification(
paste("Missing required columns:", paste(missing_cols, collapse = ", ")),
type = "error",
duration = 4
)
} else {
showNotification("File uploaded successfully!", type = "message", duration = 2)
}
}, error = function(e) {
showNotification("Error reading file. Please ensure it's a valid CSV file.",
type = "error", duration = 4)
})
})
###################### WARNING IF POPULATION NUMBER < NUMBERS FOR SIMULATION #######
# Create a reactive value to track validation states
validationStates <- reactiveValues(
enough_subjects = TRUE,
enough_time = TRUE,
enough_timeMSM = TRUE,
valid_REP = TRUE
)
# Population size validation
output$nsim_validation <- renderText({
# Check if nsim is missing or invalid
if (is.null(input$nsim) || is.na(input$nsim)) {
validationStates$enough_subjects <- FALSE
return("Please specify the number of individuals for simulation")
}
# Only proceed if in Population mode
if (input$population_radio != "Population") {
validationStates$enough_subjects <- TRUE
return(NULL)
}
# Get and filter the virtual population based on data source
filtered_data <- if (input$dataset_source == "Default") {
tryCatch({
read.csv("//argos.storage.uu.se/MyFolder$/yujli183/PMxLab/Projects/BDQ shiny app optimization framework/ModelCodes/Virtual_population/TBPACTS/TBPACTS_Big_Virtual_Population_SimulatedforUse.csv",
header = T) %>%
filter(
SEX %in% c(0, 1),
AGE >= input$AGE_min & AGE <= input$AGE_max &
WT >= input$WT_min & WT <= input$WT_max &
ALB >= input$ALB_min & ALB <= input$ALB_max &
CACOR >= input$CACOR_min & CACOR <= input$CACOR_max &
K >= input$K_min & K <= input$K_max &
MTTP >= input$MTTP_min * 24 & MTTP <= input$MTTP_max * 24
)
}, error = function(e) {
validationStates$enough_subjects <- FALSE
return(data.frame())
})
} else {
# Use uploaded data
if (is.null(input$uploaded_data)) {
validationStates$enough_subjects <- FALSE
return("Please upload a data file")
}
tryCatch({
read.csv(input$uploaded_data$datapath, header = TRUE, sep = ",")
}, error = function(e) {
validationStates$enough_subjects <- FALSE
return(data.frame())
})
}
if (nrow(filtered_data) == 0) {
validationStates$enough_subjects <- FALSE
return("No data available with the current filtering criteria")
}
required_n <- input$nsim
available_n <- nrow(filtered_data)
# Update validation state
validationStates$enough_subjects <- required_n <= available_n
# Return warning message if needed
if (!validationStates$enough_subjects) {
sprintf("The number of population (%d) is lower than the number of individuals intended for simulation (%d)",
available_n, required_n, available_n)
} else {
NULL
}
})
# REP validation
output$REP_validation <- renderText({
# Check if REP is missing or invalid
if (is.null(input$REP) || is.na(input$REP)) {
validationStates$valid_REP <- FALSE
return("Please specify the number of MGIT culture replicates")
}
# Check if REP is within valid range
if (input$REP < 1 || input$REP > 3) {
validationStates$valid_REP <- FALSE
return("Number of MGIT culture replicates must be between 1 and 3")
}
# If we reach here, REP is valid
validationStates$valid_REP <- TRUE
return(NULL)
})
# Trigger REP validation when REP input changes
observe({
# This will trigger the REP_validation renderText
input$REP
})
# Simulation time validation
observe({
# Check if simtime or simtimeMSM is missing or invalid
if (is.null(input$simtime) || is.na(input$simtime) ||
is.null(input$simtimeMSM) || is.na(input$simtimeMSM)) {
validationStates$enough_time <- FALSE
validationStates$enough_timeMSM <- FALSE
output$simtime_validation <- renderText({ NULL })
output$simtimeMSM_validation <- renderText({ NULL })
return()
}
max_dur <- {
durations <- (if(input$LD1) input$ldur_1 * ifelse(input$lunit_1 == "2", 1, 1/7) else 0) +
(input$mdur_1 * ifelse(input$munit_1 == "2", 1, 1/7)) +
(if(input$MD2_1) input$m2dur_1 * ifelse(input$m2unit_1 == "2", 1, 1/7) else 0)
if(input$RG2) {
reg2_dur <- (if(input$LD2) input$ldur_2 * ifelse(input$lunit_2 == "2", 1, 1/7) else 0) +
(input$mdur_2 * ifelse(input$munit_2 == "2", 1, 1/7)) +
(if(input$MD2_2) input$m2dur_2 * ifelse(input$m2unit_2 == "2", 1, 1/7) else 0)
durations <- c(durations, reg2_dur)
}
if(input$RG3) {
reg3_dur <- (if(input$LD3) input$ldur_3 * ifelse(input$lunit_3 == "2", 1, 1/7) else 0) +
(input$mdur_3 * ifelse(input$munit_3 == "2", 1, 1/7)) +
(if(input$MD2_3) input$m2dur_3 * ifelse(input$m2unit_3 == "2", 1, 1/7) else 0)
durations <- c(durations, reg3_dur)
}
max(durations, na.rm = TRUE)
}
# Update validation states
validationStates$enough_time <- input$simtime >= max_dur
validationStates$enough_timeMSM <- input$simtimeMSM >= max_dur
output$simtime_validation <- renderText({
if (!validationStates$enough_time) {
paste0("Warning: Simulation time (", input$simtime,
" weeks) is less than the dosing duration (",
round(max_dur, 1), " weeks).")
} else {
NULL
}
})
output$simtimeMSM_validation <- renderText({
if (!validationStates$enough_timeMSM) {
paste0("Warning: Long-term outcome simulation time (", input$simtimeMSM,
" weeks) is less than the dosing duration (",
round(max_dur, 1), " weeks).")
} else {
NULL
}
})
}) %>% bindEvent(
input$simtime,
input$simtimeMSM,
input$LD1, input$ldur_1, input$lunit_1, input$mdur_1, input$munit_1,
input$LD2, input$ldur_2, input$lunit_2, input$mdur_2, input$munit_2,
input$LD3, input$ldur_3, input$lunit_3, input$mdur_3, input$munit_3,
input$RG2, input$RG3
)
# Combined validation observer
observe({
if (validationStates$enough_subjects &&
validationStates$enough_time &&
validationStates$enough_timeMSM &&
validationStates$valid_REP) {
shinyjs::enable("goButton")
} else {
shinyjs::disable("goButton")
}
})
###################### Render HL effect plot for individual mode #######
# Render the PNG image
output$HLEFFplot_indv <- renderImage({
# Path to the PNG file
filePath <- paste0(UI.directory, "HLEFF_halfLife_TSCC2.png")
# Return a list with the image path and optional width/height
list(
src = filePath,
contentType = 'image/png',
alt = "Plot image",
width = "100%"# Optional: Adjust as needed
)
}, deleteFile = FALSE)  # Set to FALSE if the file should not be deleted after rendering
###################### Render HL effect plot for population mode #######
# Render the PNG image
output$HLEFFplot_pop <- renderImage({
# Path to the PNG file
filePath <- paste0(UI.directory, "HLEFF_halfLife_TSCC2.png")
# Return a list with the image path and optional width/height
list(
src = filePath,
contentType = 'image/png',
alt = "Plot image",
width = "100%" # Optional: Adjust as needed
)
}, deleteFile = FALSE)  # Set to FALSE if the file should not be deleted after rendering
###################### Render HL effect plot for TTP simulation #######
# Render the PNG image
output$HLEFFplot_TTPsim <- renderImage({
# Path to the PNG file
filePath <- paste0(UI.directory, "HLEFF_halfLife_TSCC_PCB.png")
# Return a list with the image path and optional width/height
list(
src = filePath,
contentType = 'image/png',
alt = "Plot image",
width = "100%"# Optional: Adjust as needed
)
}, deleteFile = FALSE)  # Set to FALSE if the file should not be deleted after rendering
###################### OUTPUT OPTIONS ######################
outputOptions(output, "plot", suspendWhenHidden = FALSE)
outputOptions(output, "plotQT", suspendWhenHidden = FALSE)
outputOptions(output, "plotTTP", suspendWhenHidden = FALSE)
outputOptions(output, "plotMSM", suspendWhenHidden = FALSE)
###################### DOWNLOAD CODE HANDLER ######################
output$download_code <- downloadHandler(
filename = function() {
"BDQ_Shiny_App_Source_Code.zip"
},
content = function(file) {
# Create a temporary directory
temp_dir <- tempdir()
# Define valid PNG file patterns (add more patterns as needed)
png_patterns <- "^HLEFF.*\\.png$"
# List of files to include in the zip
files_to_zip <- c(
# UI Components - R, CSV, TXT files
list.files(UI.directory, pattern = "\\.(R|csv|txt)$", full.names = TRUE),
# UI Components - specific PNG files
list.files(UI.directory, pattern = png_patterns, full.names = TRUE),
# Server Components - R, CSV, TXT files
list.files(Server.directory, pattern = "\\.(R|csv|txt)$", full.names = TRUE),
# Server Components - specific PNG files
list.files(Server.directory, pattern = png_patterns, full.names = TRUE)
)
# Create directories in temp folder
dir.create(file.path(temp_dir, "BDQ_UI"), recursive = TRUE, showWarnings = FALSE)
dir.create(file.path(temp_dir, "BDQ_Server"), recursive = TRUE, showWarnings = FALSE)
# Copy files
for(f in files_to_zip) {
if(file.exists(f)) {  # Only copy if file exists
if(grepl("BDQ_UI", f)) {
file.copy(f, file.path(temp_dir, "BDQ_UI", basename(f)), overwrite = TRUE)
} else {
file.copy(f, file.path(temp_dir, "BDQ_Server", basename(f)), overwrite = TRUE)
}
}
}
# Create zip file - use same patterns for final zip creation
zip::zipr(file, files = c(
list.files(temp_dir, recursive = TRUE, full.names = TRUE, pattern = "\\.(R|csv|txt)$"),
list.files(temp_dir, recursive = TRUE, full.names = TRUE, pattern = png_patterns)
))
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('//argos.storage.uu.se/MyFolder$/yujli183/PMxLab/Projects/BDQ shiny app optimization framework/ModelCodes')
Server.directory
runApp('//argos.storage.uu.se/MyFolder$/yujli183/PMxLab/Projects/BDQ shiny app optimization framework/ModelCodes')
Server.directory
# Set directory paths
# change current.directory to the path you have for app.R
current.directory <- "//argos.storage.uu.se/MyFolder$/yujli183/PMxLab/Projects/BDQ shiny app optimization framework/ModelCodes/"
UI.directory <- paste0(current.directory, "BDQ_UI/")
Server.directory <- paste0(current.directory, "BDQ_Server/")
Server.directory
